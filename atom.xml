<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yachen</title>
  <icon>https://yachen168.github.io/icon.png</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yachen168.github.io/"/>
  <updated>2020-06-07T04:00:40.843Z</updated>
  <id>https://yachen168.github.io/</id>
  
  <author>
    <name>yachen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>三種改變函式內部 this 的方式：apply()、call()、bind()</title>
    <link href="https://yachen168.github.io/article/%E6%94%B9%E8%AE%8A%E5%87%BD%E5%BC%8F%E7%9A%84this.html"/>
    <id>https://yachen168.github.io/article/%E6%94%B9%E8%AE%8A%E5%87%BD%E5%BC%8F%E7%9A%84this.html</id>
    <published>2020-06-04T09:29:48.000Z</published>
    <updated>2020-06-07T04:00:40.843Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在 JavaScript 中，改變函數內部 this 的指向常見的方式有 &lt;code&gt;call()&lt;/code&gt;、&lt;code&gt;apply()&lt;/code&gt;、&lt;code&gt;bind()&lt;/code&gt;，而這三種方式又存在些微差異。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://yachen168.github.io/categories/web/"/>
    
    
      <category term="w3HexSchool" scheme="https://yachen168.github.io/tags/w3HexSchool/"/>
    
      <category term="JavaScript" scheme="https://yachen168.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS 原理 - Flex(下)</title>
    <link href="https://yachen168.github.io/article/Flex3.html"/>
    <id>https://yachen168.github.io/article/Flex3.html</id>
    <published>2020-05-11T02:53:54.000Z</published>
    <updated>2020-06-04T10:07:10.829Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;vertical-align、text-align 甚至 float 都是控制不了 flex items 的，flex 有自己專屬的對齊屬性，而因對齊分為水平對齊與垂直對齊，所以首先要先認清楚誰是主軸(main axis)誰是副軸(cross axis)，才不會精神分裂。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://yachen168.github.io/categories/web/"/>
    
    
      <category term="CSS" scheme="https://yachen168.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 原理 - Flex(中)</title>
    <link href="https://yachen168.github.io/article/Flex2.html"/>
    <id>https://yachen168.github.io/article/Flex2.html</id>
    <published>2020-05-10T07:54:33.000Z</published>
    <updated>2020-06-04T10:09:02.579Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;這篇將介紹 flex 屬性，並且深入探討 flex 究竟是如何計算伸縮的比例。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://yachen168.github.io/categories/web/"/>
    
    
      <category term="CSS" scheme="https://yachen168.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 原理 - Flex(上)</title>
    <link href="https://yachen168.github.io/article/Flex.html"/>
    <id>https://yachen168.github.io/article/Flex.html</id>
    <published>2020-05-08T05:32:37.000Z</published>
    <updated>2020-06-04T10:33:11.843Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;接下來將介紹 flex，從先前 &lt;a href=&quot;https://yachen168.github.io/article/Formatting-context.html&quot;&gt;formatting context&lt;/a&gt; 的觀念開始，再詳細介紹每個屬性的用法以及 flex box 伸縮的計算方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://yachen168.github.io/categories/web/"/>
    
    
      <category term="CSS" scheme="https://yachen168.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 原理 - position</title>
    <link href="https://yachen168.github.io/article/Position.html"/>
    <id>https://yachen168.github.io/article/Position.html</id>
    <published>2020-03-31T12:03:24.000Z</published>
    <updated>2020-06-04T10:09:47.982Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;這篇要介紹的是 position，顧名思義，它與元素的位置或定位方式有關，了解它的各種屬性值肯定是必要的，像是常見的彈跳視窗或固定導覽列，也都需要它。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://yachen168.github.io/categories/web/"/>
    
    
      <category term="CSS" scheme="https://yachen168.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 原理 - Block Formatting Context</title>
    <link href="https://yachen168.github.io/article/Block-formatting-context.html"/>
    <id>https://yachen168.github.io/article/Block-formatting-context.html</id>
    <published>2020-03-12T08:35:37.000Z</published>
    <updated>2020-06-04T10:07:15.960Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;或許你沒聽過 Block Formatting Context，但你肯定有用過！其實在切版時，常常會使用到 BFC，只是你沒有意識到而已，如果能夠有意識的使用 BFC，對於版面的掌控非常有幫助。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://yachen168.github.io/categories/web/"/>
    
    
      <category term="CSS" scheme="https://yachen168.github.io/tags/CSS/"/>
    
      <category term="w3HexSchool" scheme="https://yachen168.github.io/tags/w3HexSchool/"/>
    
  </entry>
  
  <entry>
    <title>CSS 原理 - Formatting Context</title>
    <link href="https://yachen168.github.io/article/Formatting-context.html"/>
    <id>https://yachen168.github.io/article/Formatting-context.html</id>
    <published>2020-03-04T07:23:52.000Z</published>
    <updated>2020-06-04T10:09:37.217Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;每個元素都是一個個的盒子(box)，這些盒子在 in flow 下會如何排列就要看該盒子處在什麼樣的佈局環境，而 formatting context (格式化上下文) 指的就是佈局環境，不同類型的佈局環境會有不同的佈局規則，換句話說，處在不同類型佈局環境裡的盒子，排列方式會有所不同。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://yachen168.github.io/categories/web/"/>
    
    
      <category term="CSS" scheme="https://yachen168.github.io/tags/CSS/"/>
    
      <category term="w3HexSchool" scheme="https://yachen168.github.io/tags/w3HexSchool/"/>
    
  </entry>
  
  <entry>
    <title>CSS 原理 - Line box</title>
    <link href="https://yachen168.github.io/article/LineBox.html"/>
    <id>https://yachen168.github.io/article/LineBox.html</id>
    <published>2020-02-23T03:58:29.000Z</published>
    <updated>2020-06-04T10:09:41.702Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Line box 就像筆記本上的線框，一行一行的垂直堆疊，裡面裝著文字或是 inline-level boxes，而我們可以利用 text-align 與 vertical-align 屬性操控 inline-level boxes 在 line box 裡的水平與垂直對齊。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://yachen168.github.io/categories/web/"/>
    
    
      <category term="CSS" scheme="https://yachen168.github.io/tags/CSS/"/>
    
      <category term="w3HexSchool" scheme="https://yachen168.github.io/tags/w3HexSchool/"/>
    
  </entry>
  
  <entry>
    <title>CSS 原理 - 你所不知道的 display</title>
    <link href="https://yachen168.github.io/article/display.html"/>
    <id>https://yachen168.github.io/article/display.html</id>
    <published>2020-02-15T08:48:59.000Z</published>
    <updated>2020-06-04T10:09:15.083Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Visual formatting model (視覺格式化模型) 對於排版來說是很重要的觀念，但不是那麼平易近人且有點抽象，在初次看 &lt;a href=&quot;https://www.w3.org/TR/CSS2/visuren.html&quot;&gt;W3C 規範&lt;/a&gt; 時一定是霧煞煞，強烈建議先釐清幾個重要名詞的定義，會發現繞來繞去，講的其實都是相同的概念。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://yachen168.github.io/categories/web/"/>
    
    
      <category term="CSS" scheme="https://yachen168.github.io/tags/CSS/"/>
    
      <category term="w3HexSchool" scheme="https://yachen168.github.io/tags/w3HexSchool/"/>
    
  </entry>
  
  <entry>
    <title>CSS 原理 - Collapsing margins</title>
    <link href="https://yachen168.github.io/article/Collapsing-margins.html"/>
    <id>https://yachen168.github.io/article/Collapsing-margins.html</id>
    <published>2020-02-11T15:22:02.000Z</published>
    <updated>2020-06-04T10:09:25.224Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什麼是-Collapsing-margins？&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#什麼是-Collapsing-margins？&quot;&gt;&lt;/a&gt;什麼是 Collapsing margins？&lt;/h2&gt;
&lt;p&gt;先來看一段 &lt;a href=&quot;https://www.w3.org/TR/CSS2/box.html#collapsing-margins&quot;&gt;W3C 規範&lt;/a&gt; 的敘述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In CSS, the adjoining margins of two or more boxes (which might or might not be siblings) can combine to form a single margin. Margins that combine this way are said to collapse, and the resulting combined margin is called a collapsed margin.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://yachen168.github.io/categories/web/"/>
    
    
      <category term="CSS" scheme="https://yachen168.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 原理 - Containing block</title>
    <link href="https://yachen168.github.io/article/Containing-block.html"/>
    <id>https://yachen168.github.io/article/Containing-block.html</id>
    <published>2020-02-08T18:27:51.000Z</published>
    <updated>2020-06-04T10:09:20.454Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Containing block，中文常被翻譯為包含塊，它其實代表的是一個「區域」，一個由 box model 的 content edge 或 padding edge (若有設定 padding)所圍繞的範圍，它攸關元素的定位、寬高、內距與外距的計算，所以必須清楚知道元素的 containing block 是誰，才不會使畫面失控。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://yachen168.github.io/categories/web/"/>
    
    
      <category term="CSS" scheme="https://yachen168.github.io/tags/CSS/"/>
    
      <category term="w3HexSchool" scheme="https://yachen168.github.io/tags/w3HexSchool/"/>
    
  </entry>
  
  <entry>
    <title>CSS 原理 - Box model</title>
    <link href="https://yachen168.github.io/article/box-model.html"/>
    <id>https://yachen168.github.io/article/box-model.html</id>
    <published>2020-01-30T03:19:42.000Z</published>
    <updated>2020-06-04T10:09:29.190Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;想像每個元素都是個盒子，而 &amp;lt;html&amp;gt; 就像是個超級大盒子，裡面裝了許許多多大小不一的盒子，像是 &amp;lt;div&amp;gt;、&amp;lt;p&amp;gt;、&amp;lt;span&amp;gt;、&amp;lt;button&amp;gt;…等等，而每個盒子由四個部分組成。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://yachen168.github.io/categories/web/"/>
    
    
      <category term="CSS" scheme="https://yachen168.github.io/tags/CSS/"/>
    
  </entry>
  
</feed>
