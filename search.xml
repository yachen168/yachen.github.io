<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSS 原理 - position</title>
      <link href="/article/Position.html"/>
      <url>/article/Position.html</url>
      
        <content type="html"><![CDATA[<p>這篇要介紹的是 position，顧名思義，它與元素的位置或定位方式有關，了解它的各種屬性值肯定是必要的，像是常見的彈跳視窗或固定導覽列，也都需要它。</p><a id="more"></a><br><h2 id="position-語法"><a class="header-anchor" href="#position-語法"></a>position 語法</h2><p>position 的屬性值有 static、relative、absolute、fixed 與 sticky。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">position: static | relative | absolute | fixed | sticky</span><br></pre></td></tr></table></figure><br><h3 id="static"><a class="header-anchor" href="#static"></a>static</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">static</span>;</span><br></pre></td></tr></table></figure><ul><li><p>為預設值。</p></li><li><p>元素為 in-flow。</p></li><li><p>top、right、bottom 與 left 屬性皆無效。</p></li><li><p>z-index 屬性無效。</p></li></ul><br><p><img src="https://i.imgur.com/Z8A5Qln.png" alt=""></p><br><h3 id="relative"><a class="header-anchor" href="#relative"></a>relative</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span><br></pre></td></tr></table></figure><ul><li><p>元素仍為 in-flow，為元素<code>預留原本的空間</code>。</p></li><li><p>top、right、bottom 與 left 屬性可指定元素相對於<code>自身原本的位置</code>做偏移，<code>不影響</code>其他元素的位置。</p></li></ul><p><img src="https://i.imgur.com/PzvtHCj.png" alt=""></p><ul><li>此屬性值對 display 值為 table-row-group、table-header-group、table-footer-group、table-row、table-column-group、 table-column、table-cell 與 table-caption 的元素無效。</li></ul><br><h3 id="absolute"><a class="header-anchor" href="#absolute"></a>absolute</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br></pre></td></tr></table></figure><ul><li>元素 out-of-flow，<code>不為</code>元素預留原本的空間。</li></ul><p><img src="https://i.imgur.com/N7nm4d3.png" alt=""></p><ul><li><p>相對於祖譜中<code>最接近</code>且 <code>position</code> 值<code>非 static</code> 的<code>containing block(包含塊)</code>做定位，<code>若無</code>，則追溯至 initial containing block (初始包含塊)，在連續媒體下即為 veiwport (視口)。</p></li><li><p>top、right、bottom 與 left 屬性可指定其對於<code>containing block(包含塊)</code>的偏移量，不影響其他元素的位置。</p></li><li><p><code>不會</code>與其他元素發生 <code>margin collapsing(外距重疊)</code>，因為會建立一個新的 BFC。</p></li><li><p>建立 <code>Block Formatting Context(BFC)</code>。</p></li></ul><br><h3 id="fixed"><a class="header-anchor" href="#fixed"></a>fixed</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">fixed</span>;</span><br></pre></td></tr></table></figure><br><ul><li>元素 out-of-flow，<code>不為</code>元素預留原本的空間。</li></ul><p><img src="https://i.imgur.com/BIxGB5g.gif" alt=""></p><ul><li><p><code>containing block(包含塊)</code>為 <code>veiwport</code>，所以會以 veiwport 做定位，滾動時，元素相對於 viewport 仍處於同一位置。</p></li><li><p>上層元素中若有 <code>transform</code> 屬性<code>非 none </code>的祖先時，<code>containing block(包含塊)</code>由 veiwport <code>改為該祖先</code>，即針對該祖先定位。</p></li><li><p>top、right、bottom 與 left 屬性可指定其對於<code>containing block</code>的偏移量。</p></li><li><p><code>不會</code>與其他元素發生 margin collapsing(外距重疊)。</p></li><li><p>建立 <code>Block Formatting Context(BFC)</code>。</p></li></ul><br><h3 id="sticky"><a class="header-anchor" href="#sticky"></a>sticky</h3><p>為相對定位(relative)和固定定位(fixed)的混合體。元素在跨越<code>特定門檻(specified threshold)</code>之前屬於相對定位，之後屬於固定定位。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">sticky</span>;</span><br></pre></td></tr></table></figure><ul><li><p>元素為 in-flow。</p></li><li><p>必須指定 top、right、bottom 或 left 其中一個做為<code>特定門檻(specified threshold)</code>，sticky 才有效，<code>即使是 top: 0</code>。</p></li><li><p>相對於最近的可滾動祖先和 containing block 做定位。</p></li><li><p>top、right、bottom 與 left 屬性可指定其偏移量，不影響其他元素的位置。</p></li><li><p>建立 <code>Block Formatting Context(BFC)</code>。</p></li></ul><br><p>例如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">280px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1850px</span>;  <span class="comment">/*  可滾動   */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: sticky;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">150px</span>;  <span class="comment">/*  門檻值(必要條件)  */</span> </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">70px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">70px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/ZoLNZ9R.gif" alt=""></p><br><br><p><br>參考資源</br><br><a href="https://www.w3.org/TR/CSS22/visuren.html#choose-position">W3C-hoosing a positioning scheme: ‘position’ property</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position">MDN-position</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context">MDN-Block formatting context</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 原理 - Block Formatting Context</title>
      <link href="/article/Block-formatting-context.html"/>
      <url>/article/Block-formatting-context.html</url>
      
        <content type="html"><![CDATA[<p>或許你沒聽過 Block Formatting Context，但你肯定有用過！其實在切版時，常常會使用到 BFC，只是你沒有意識到而已，如果能夠有意識的使用 BFC，對於版面的掌控非常有幫助。</p><a id="more"></a><br><h2 id="什麼是-Block-Formatting-Context"><a class="header-anchor" href="#什麼是-Block-Formatting-Context"></a>什麼是 Block Formatting Context</h2><p>如同上一篇 <a href="https://yachen168.github.io/article/Formatting-context.html#more">CSS 原理 - Formatting Context</a> 所說，Formatting Context 指的是佈局環境，而佈局環境有許多種，不同的佈局環境會有不同的佈局規則，Block Formatting Context (BFC)是其中一種。</p><p>下方為一段 <a href="https://www.w3.org/TR/CSS21/visuren.html#block-formatting">W3C</a> 對於 BFC 的敘述：</p><blockquote><p>In a block formatting context, boxes are laid out one after the other, vertically, beginning at the top of a containing block. The vertical distance between two sibling boxes is determined by the ‘margin’ properties. Vertical margins between adjacent block-level boxes in a block formatting context collapse.</p></blockquote><blockquote><p>In a block formatting context, each box’s left outer edge touches the left edge of the containing block (for right-to-left formatting, right edges touch).</p></blockquote><br><p>簡單來說，處在<code>同一個 BFC </code>中的元素(盒子)，會有以下現象：</p><ul><li><p>元素(盒子)從其 <code>containing block(包含塊)</code>的頂部開始，一個接一個呈現<code>垂直</code>排列。</p></li><li><p>若書寫方向為預設的由左至右，則元素(盒子)會貼齊其 containing block(包含塊)左側。</p></li><li><p>相鄰元素(盒子)之間的垂直距離，由元素的 margin 屬性決定。</p></li><li><p>相鄰的 block-level box(塊級盒子)垂直方向會發生 <code>margin collapsing(邊距重疊)</code>。</p></li></ul><br><h3 id="圖示"><a class="header-anchor" href="#圖示"></a>圖示</h3><p>將上述現象用圖形表示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先，&lt;html&gt; 會建立一個 BFC (先破梗了)，而 &lt;body&gt; 與三個 &lt;div&gt; 參與的是 &lt;html&gt; 建立的 BFC，也就是說， &lt;body&gt; 與三個 &lt;div&gt; 處於同一個 BFC 中，因此元素會：</p><ul><li>呈現垂直排列。</li><li>可以用 margin 來推開彼此。</li><li>垂直方向會發生 margin collapsing(邊距重疊)，其中 margin collapsing 又分為兩種(同層元素間以及元素與其容器間)，可參考先前文章 <a href="https://yachen168.github.io/article/Collapsing-margins.html">CSS 原理 - Collapsing margins</a>。</li></ul><p><img src="./Block-formatting-context/BFC.png" alt=""></p><br><p>注意，以上現象強調的是處於同一個 BFC 裡的元素(盒子)，若元素自立門戶創建新的 BFC，則不完全適用，所以<code>了解什麼情況會建立新的 BFC 很重要</code>。</p><br><br><h2 id="何時會建立-BFC"><a class="header-anchor" href="#何時會建立-BFC"></a>何時會建立 BFC</h2><p>對於「什麼時候會建立一個 BFC」，其實 <a href="https://www.w3.org/TR/css-display-3/#block-formatting-context">W3C</a> 並沒有一個非常正式的定義，有些條件是非常不嚴謹的，而在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context">MDN</a> 上則有逐一詳細列出，可供參考。</p><br><p>根據 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context">MDN</a>，以下情況的元素會創建 Block Formatting Context(BFC)：</p><blockquote><ul><li>&lt;html&gt;</li><li>float 元素</li><li>position: absolute、fixed 的元素</li><li>overflow: hidden、scroll、auto 的元素</li><li>display: inline-block 的元素</li><li>display: flow-root 的元素</li><li>display: flex 或 inline-flex 元素的<code>直接子元素</code>，即 flex items</li><li>display: grid 或 inline-grid 元素的<code>直接子元素</code>，即 grid items</li><li>display: table、table-caption、table-cell、table-rowtable-row-group、table-header-group、table-footer-groupinline-table</li><li>contain: layout、content 或 paint 的元素</li><li>column-count 或 column-width 不為 auto 的元素</li><li>column-span 為 all 的元素</li></ul></blockquote><br><br><hr><h2 id="BFC-功用"><a class="header-anchor" href="#BFC-功用"></a>BFC 功用</h2><p>可以解決：</p><ul><li><code>float</code> 元素的<code>外層容器塌陷</code>問題。</li><li>元素間的 <code>margin collapsing(外邊距重疊)</code>問題</li><li>float 元素與其他元素的重疊問題 (float 元素遮住其他元素)。</li></ul><br><h3 id="解決-float-元素造成外容器塌陷問題"><a class="header-anchor" href="#解決-float-元素造成外容器塌陷問題"></a>解決 float 元素造成外容器塌陷問題</h3><p>float 元素會導致外層容器的高度塌陷(若外層容器高度為 auto 且無其它比 float 元素高的子元素)。</p><p>例如：<a href="https://codepen.io/yachen/pen/wvambOK?editors=1100">範例連結</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是裝著 float 元素的容器<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span>我是 float 元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: grey;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.float</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="./Block-formatting-context/float-1.png" alt=""></p><br><p>此時可以<code>使外層容器建立 BFC 來恢復高度</code>，例如在外層容器加上 overflow: hidden 或 display: flow-root。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">      <span class="attribute">display</span>: flow-root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>登愣～外層容器撐開了。<br><img src="./Block-formatting-context/float-2.png" alt=""></p><br><h3 id="解決-margin-collapsing-問題"><a class="header-anchor" href="#解決-margin-collapsing-問題"></a>解決 margin collapsing 問題</h3><p>當元素與元素之間發生 margin collapsing 時，可使元素建立 BFC 來解決 margin collapsing 的問題。</p><br><h3 id="解決-float-元素遮住其他元素的問題"><a class="header-anchor" href="#解決-float-元素遮住其他元素的問題"></a>解決 float 元素遮住其他元素的問題</h3><p>在先前文章 <a href="https://yachen168.github.io/article/LineBox.html">CSS 原理 - Line box</a> 曾提到，float 元素會擠壓 line box，除此之外，float 元素還可能遮住其它元素！<br><br></p><p>如果你有用過 float，應該有遇過 float 元素遮住其它非 float 元素的情況，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.float</span>&#123;</span><br><span class="line">      <span class="attribute">float</span>: left;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">      <span class="attribute">display</span>: block;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>橘色的 float 元素蓋住了黃色元素。</p><p><img src="./Block-formatting-context/float-3.png" alt=""></p><br><p>只要讓黃色元素建立 BFC 即可解決重疊問題，例如加上 overflow: hidden 或 display: flow-root。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">      <span class="attribute">display</span>: flow-root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="./Block-formatting-context/float-4.png" alt=""></p><br><br><br><p><b>參考資源</b></p><p><a href="https://www.w3.org/TR/css-display-3/#glossary">W3C-Appendix A: Glossary</a><br><a href="https://www.w3.org/TR/css-display-3/#the-display-properties">W3C-Box Layout Modes: the display property</a><br><a href="https://www.w3.org/TR/CSS21/box.html#collapsing-margins">W3C-Collapsing margins</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context">MDN-Block formatting context</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> w3HexSchool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 原理 - Formatting Context</title>
      <link href="/article/Formatting-context.html"/>
      <url>/article/Formatting-context.html</url>
      
        <content type="html"><![CDATA[<p>每個元素都是一個個的盒子(box)，這些盒子在 in flow 下會如何排列就要看該盒子處在什麼樣的佈局環境，而 formatting context (格式化上下文) 指的就是佈局環境，不同類型的佈局環境會有不同的佈局規則，換句話說，處在不同類型佈局環境裡的盒子，排列方式會有所不同。</p><a id="more"></a><h2 id="什麼是-Formatting-Context"><a class="header-anchor" href="#什麼是-Formatting-Context"></a>什麼是 Formatting Context</h2><p>先來看一段 W3C 規範對於 formatting context (格式化上下文) 的敘述。<br>摘自 <a href="https://www.w3.org/TR/css-display-3/#glossary">W3C</a></p><blockquote><p>A formatting context is the environment into which a set of related boxes are laid out. Different formatting contexts lay out their boxes according to different rules.</p></blockquote><blockquote><p>A box either establishes a new independent formatting context or continues the formatting context of its containing block. The type of formatting context established by the box is determined by its inner display type.</p></blockquote><blockquote><p>Additionally, some types of formatting contexts interleave and co-exist.</p></blockquote><br><p>也就是說，formatting context 指的是一個「佈局環境」，處在什麼佈局環境裡的元素(盒子)，就得遵守什麼環境的佈局規則，盒子也可以自立門戶，建立新的 formatting context，再繼續裝其它盒子，而會<code>建立什麼類型的 formatting context</code>，取決於 display 屬性的 <code>inner display type</code>。可參考先前文章 <a href="https://yachen168.github.io/article/display.html">你所不知道的 display</a>。</p><p>有些類型的 formatting contexts 可以同時交互並存，像是 BFC 與 IFC 或是 FFC 與 IFC 等。<br><br></p><h2 id="Formatting-Context-類型"><a class="header-anchor" href="#Formatting-Context-類型"></a>Formatting Context 類型</h2><p>Formatting context 大致有以下幾種，其中，BFC 與 IFC 對於排版來說最為重要，而除了 BFC 較為特殊之外，其餘的 formatting context 取決於元素的 display 屬性。</p><ul><li>Block Formatting Context (BFC)</li><li>Inline Formatting Context (IFC)</li><li>Flex Formatting Context (FFC)</li><li>Grid Formatting Context (GFC)</li><li>Ruby Formatting Contect (RFC)</li></ul><br><h2 id="Independent-Formatting-Context"><a class="header-anchor" href="#Independent-Formatting-Context"></a>Independent Formatting Context</h2><p>剛提到盒子可以自立門戶，為其後裔元素<code>建立</code>自己的 formatting context，而當一個元素(盒子)建立了獨立的 formatting context，不論所建立的類型是否與該元素所處的 formatting context 相同，都是為其<code>後裔元素</code>建立了一個新的佈局環境，所以其後裔元素的佈局通常不必再遵守該元素所處的佈局環境規則。</p><p>值得留意的是，除了 display 之外，有些屬性也會使元素<code>建立</code>獨立的 formatting context，像是 <code>float</code>、<code>position: absolute</code> 或 <code>fixed</code> 這些會使元素脫離正常流(out-of-flow)的屬性皆會<code>建立</code>獨立的 formatting context。</p><br><h2 id="圖解-Formatting-Context"><a class="header-anchor" href="#圖解-Formatting-Context"></a>圖解 Formatting Context</h2><p>「Formatting context 是個佈局環境，不同的 formatting context 有不同的佈局方式」，用圖形或許可以幫助理解，以下將舉三個例子，主要為 BFC 與 IFC，其他類型的 formatting context 概念皆相同，可以此類推。</p><p>下圖截取部分 W3C 規範中的 display 表格，若對於這個表格感到陌生的讀者，建議先看先前文章 <a href="https://yachen168.github.io/article/display.html">你所不知道的 display</a>。</p><p><img src="./Formatting-context/display.png" alt=""><br>圖片來源: <a href="https://www.w3.org/TR/css-display-3/#the-display-properties">W3C</a></p><br><h3 id="Case1-BFC"><a class="header-anchor" href="#Case1-BFC"></a>Case1: BFC</h3><p>&lt;html&gt; 就是個超級大盒子，裡面裝著其他盒子，且會<code>建立</code>一個 BFC，由上方 display 表可知，其後裔元素 &lt;body&gt; 與三個橘色的 block 元素皆會生成 block-level box，且處在 BFC 裡(或說是<code>參與</code> BFC)，所以會呈現垂直排列。</p><p><img src="./Formatting-context/BFC.png" alt=""></p><br><h3 id="Case2-IFC"><a class="header-anchor" href="#Case2-IFC"></a>Case2: IFC</h3><p>由上方 display 表可知，&lt;body&gt; 對內會生成 block container，可以建立 IFC，而其兩個橘色的 inline 後裔元素會生成 inline box(為一種 inline-level box)，且處在此 IFC 中(或說是<code>參與</code>該 IFC)，所以呈現水平排列。</p><p><img src="./Formatting-context/IFC.png" alt=""></p><br><h3 id="Case3-混合"><a class="header-anchor" href="#Case3-混合"></a>Case3: 混合</h3><p>inline-block 元素會生成<code>inline-level box</code>，該元素本身處在 &lt;body&gt; 所建立的 IFC 中(或說是<code>參與</code>該 IFC)，且兩個 inline-block 元素分別為其後裔元素建立了新的獨立佈局環境──<code>BFC</code> 與 <code>IFC</code>，所以其後裔元素<code>不會</code>與 inline-block 元素一同參與外部 IFC。</p><p><img src="./Formatting-context/inline-block.png" alt=""></p><br><br><h2 id="結語"><a class="header-anchor" href="#結語"></a>結語</h2><p>說穿了，formatting context 就真的只是「佈局環境」而已，花了一個篇幅解釋 formatting context 其實是在替後面的文章鋪路，接下來將介紹在排版中最為重要的 block formatting context(BFC)。</p><br><br><br><p><b>參考資料</b><br><a href="https://www.w3.org/TR/css-display-3/#glossary">W3C - Appendix A: Glossary</a><br><a href="https://www.w3.org/TR/css-display-3/#the-display-properties">W3C - Box Layout Modes: the display property</a><br><a href="https://www.w3.org/TR/CSS2/visuren.html#block-boxes">W3C - Block-level elements and block boxes</a><br><a href="https://www.w3.org/TR/CSS2/visuren.html#inline-boxes">W3C - Inline-level elements and inline boxes</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> w3HexSchool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 原理 - Line box</title>
      <link href="/article/LineBox.html"/>
      <url>/article/LineBox.html</url>
      
        <content type="html"><![CDATA[<p>Line box 就像筆記本上的線框，一行一行的垂直堆疊，裡面裝著文字或是 inline-level boxes，而我們可以利用 text-align 與 vertical-align 屬性操控 inline-level boxes 在 line box 裡的水平與垂直對齊。</p><a id="more"></a><h2 id="什麼是-line-box"><a class="header-anchor" href="#什麼是-line-box"></a>什麼是 line box</h2><p><img src="./LineBox/notebook.jpg" alt=""><br>圖片來源：<a href="https://visualhunt.com/photo2/1605/">visualhunt</a></p><p>line box 是用來裝文字與所有 inline-level box 的，換句話說，<code>只要有文字或是 inline-level box 的地方，就會出現 line box</code>，就像「行」的概念，一個 line box 就是一行。這篇將說明 line box 的範圍是如何決定的。</p><p>若對於哪些元素會生成 inline-level box 不太清楚，可複習<a href="https://yachen168.github.io/article/dispaly.html#more">上一篇 display</a> 文章。</p><br><h2 id="line-box-寬度"><a class="header-anchor" href="#line-box-寬度"></a>line box 寬度</h2><p>line box 是「行」的概念，也是一個矩形範圍，正常情況下，line box 的寬度取決於 <a href="https://yachen168.github.io/article/Containing-block.html">Containing block(包含塊)</a>，但若有 float 元素，則 line box 會受到壓縮(shrink)。</p><p>直接用實例來看會較具體一點，以下將比較正常情況下與在有 float 元素下，line box 的寬度會如何變化。</p><br><h3 id="Case-無-float-元素時"><a class="header-anchor" href="#Case-無-float-元素時"></a>Case: 無 float 元素時</h3><p>以 display: inline-block 為例，該元素屬於 inline-level box，故會產生 line box，而 line box 寬度取決於其 containing block(包含塊)。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block-container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inline-level-box"</span>&gt;</span></span><br><span class="line">    display: inline-block</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.inline-level-box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block; <span class="comment">/* 為一種 inline-level-box */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="./LineBox/width-2.png" alt=""></p><br><p>此時設定 text-align: center，則橘色的 inline-level box 會水平置中於 line box 裡，這結果應該毫不令人意外。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block-container</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="./LineBox/text-align-2.png" alt=""></p><br><h3 id="Case-有-float-元素時"><a class="header-anchor" href="#Case-有-float-元素時"></a>Case: 有 float 元素時</h3><p>當有 float 元素時，line box 會受到 float 元素的擠壓，若擠壓到 line box 無法容納裡面的文字或是 inline-level box 時，line box 就會自動「<code>換行</code>」。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.float</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;   <span class="comment">/* float 會擠壓 line box */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#F75848</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.inline-level-box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;   <span class="comment">/* 為一種 inline-level-box */</span></span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>此時 line box 已經被 float 元素壓縮了。<a href="https://codepen.io/yachen/pen/dyoOLWR?editors=1100">範例連結</a></p><p><img src="./LineBox/float-1.png" alt=""></p><p>設定 text-align: center，讓橘色的 inline-level box 水平置中於被壓縮後的 line box 裡。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block-container</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="./LineBox/float-2.png" alt=""></p><br><p>接著，若 float 元素變更寬，擠壓 line box 更多，多到該行無法再容納橘黃色的 inline-level box 時，line box 就會「換行」。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.float</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;  <span class="comment">/* 變超胖 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="./LineBox/float-4.png" alt=""></p><br><h2 id="line-box-高度"><a class="header-anchor" href="#line-box-高度"></a>line box 高度</h2><p>如同上述，line box 是用來裝文字或 inline-levle box 的，所以一個 line box (同一行)高度由位置<code>最高</code>的 <code>inline-level box 頂部</code>與位置<code>最低</code>的 <code>inline-level box 底部</code>的距離。</p><p>其中 inline-level box 又可二分為 inline box 與 atomic inline-level box 兩種，像是<code>替換元素 &lt;img&gt;</code> 或 <code>display: inline-block</code> 皆屬於 atomic inline-level box，下一篇文章會說明兩種有何差別(應該會吧)。</p><br><h3 id="Case-若是-inline-box"><a class="header-anchor" href="#Case-若是-inline-box"></a>Case: 若是 inline box</h3><blockquote><p>Inline box 僅有 box model 中的 content area 會影響 line box 高度。</p></blockquote><p>Line box 僅取決於 inline box 的 content area (像是 line-height 或 font-size 皆會影響 content area)，<code>不</code>包含 padding、border、margin。</p><h4 id="例子"><a class="header-anchor" href="#例子"></a>例子</h4><p>&lt;span&gt; 預設為 display: inline，且非替換元素(nonreplaced elememt)，為 inline-level element 中的 inline element，故其僅有 line-height 會影響 line box，padding、border、margin 皆不會影響 line box 高度。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Lorem ipsum, dolor sit add</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我在 inline box 裡面<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    Lorem ipsum, dolor sit amet consectetur .</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">220px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>為方便觀察，給 &lt;span&gt; 背景橘色的顏色，並給 &lt;span&gt; 上下左右 padding 各 10px。<br><code>反白區域為一個 line box 高度</code>。可以清楚看見，<code>line box 並沒有被撐高</code>，上下方的文字沒有被推開(但左右有)。</p><p><img src="./LineBox/inline-box.png" alt=""></p><p><br></br></p><h3 id="Case-若是-atomic-inline-level-box"><a class="header-anchor" href="#Case-若是-atomic-inline-level-box"></a>Case: 若是 atomic inline-level box</h3><blockquote><p>Atomic inline-level box 的整個 box model 會影響 line box 高度。</p></blockquote><p>Line box 取決於 atomic inline-level box 的整個 <code>box model 高度</code>，即包含 padding、border 與 margin 部分。</p><br><h4 id="例子-v2"><a class="header-anchor" href="#例子-v2"></a>例子</h4><p>現在將 &lt;span&gt; 設定為 display: inline-block，&lt;span&gt; 仍然屬於 inline-level element，但由 inline element 變成 <code>atomic inline-level element</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block; <span class="comment">/* 變成 atomic inline-level */</span></span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></br></p><p><code>反白區域為一個 line box 高度</code>。可以清楚看見，<code>line box 長高了</code>，所以上下方文字的距離也隔開了！</p><p><img src="./LineBox/atomic-box.png" alt=""></p><br><p>註：<br>① box model 高度為內容區高度 + 上下內距 +上下邊框 + 上下外距，可參考<a href="https://yachen168.github.io/article/box-model.html#more">先前文章</a>。</p><p>② <a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/Replaced_element">其它替換元素</a></p><br><br><p><b>參考資源</b><br><a href="https://www.w3.org/TR/CSS21/visuren.html#inline-formatting">W3C - Inline formatting contexts</a><br><a href="https://www.w3.org/TR/CSS21/visudet.html#line-height">W3C - Line height calculations</a><br><a href="https://www.w3.org/TR/CSS2/visuren.html#floats">W3C - Floats</a><br><a href="https://ithelp.ithome.com.tw/articles/10216486">鉄人28号FX　鉄人2号「文本士」content area</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> w3HexSchool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 原理 - 你所不知道的 display</title>
      <link href="/article/display.html"/>
      <url>/article/display.html</url>
      
        <content type="html"><![CDATA[<p>Visual formatting model (視覺格式化模型) 對於排版來說是很重要的觀念，但不是那麼平易近人且有點抽象，在初次看 <a href="https://www.w3.org/TR/CSS2/visuren.html">W3C 規範</a> 時一定是霧煞煞，強烈建議先釐清幾個重要名詞的定義，會發現繞來繞去，講的其實都是相同的概念。</p><a id="more"></a><h2 id="display"><a class="header-anchor" href="#display"></a>display</h2><p>為什麼 display: block 的元素們會呈現垂直排列？為什麼 display: inline 的元素們會呈現水平排列？又為什麼 display: inline-block 的元素是呈現水平排列呢？其實答案都與元素生成(generate)何種類型的 box 有關。<br><br></p><p>在先前 <a href="https://yachen168.github.io/article/box-model.html">box model 文章</a>中曾介紹，元素就像一個個的盒子 (box)，這篇將介紹在 in flow 下，這些「 盒子如何排列」，或說是「<code>元素如何佈局</code>」。</p><p>元素在 in flow 下如何佈局的主要關鍵為該元素「生成 (generate)了什麼類型的 box」，而這會取決於元素的 <code>display 屬性</code>。其實我們所熟悉的 display 同時定義了元素的兩種 display type：</p><ul><li><p><strong>outer display type</strong>：決定元素「<code>本身</code>」在 in flow 下如何佈局，即元素本身<code>參與</code>的是何種 formatting context (格式化上下文)。<br><br></p></li><li><p><strong>inner display type</strong>：決定元素為它的後裔元素<code>建立</code>何種 formatting context，與其<code>後裔元素的佈局</code>有關。<br><br></p></li></ul><h3 id="outer-display-type"><a class="header-anchor" href="#outer-display-type"></a>outer display type</h3><p>在 outer display type 方面，box 類型可分成 <code>inline-level box</code> 與 <code>block-level box</code> 兩大類，所有 inline-level box 皆會<code>參與 IFC</code>，呈現<code>水平</code>排列，而所有 block-level box 皆會<code>參與 BFC</code>，呈現<code>垂直</code>排列。</p><ul><li><p><strong>inline-level box (行內級盒子)</strong></p><ul><li><p>inline box (行內盒子)</p></li><li><p>atomic inline-level box (原子行內級盒)<br><br></p></li></ul></li><li><p><strong>block-level box (塊級盒子)</strong><br><br></p></li></ul><h3 id="inner-display-type"><a class="header-anchor" href="#inner-display-type"></a>inner display type</h3><p>在 inner display type 方面，因其描述的是元素本身與其內容或後裔元素的關係，可以想像成元素像個容器 (container)，裝著文字內容或後裔元素。常見的 container box 類型有 block container box、flex container box 與 grid container box 等等。</p><p>而什麼類型的 container box，就會為其內容或後裔元素<code>建立</code>什麼類型的 formatting context，例如：</p><ul><li><p>flex container 建立 flex formatting context (FFC)</p></li><li><p>grid container 建立 grid formatting context (GFC)</p></li><li><p>block container 可建立 block formatting context (BFC) 或 inline formatting context (IFC)</p></li></ul><p>順帶一提，替換元素 (replaced element)，例如 &lt;img&gt;，display 的預設值為 inline，不論將其 display 屬性值改成什麼，皆不會有 container box，因為它就是路徑來源的圖片，不是用來裝像是 &lt;span&gt;、&lt;div&gt; 或其他元素的容器。</p><p><img src="./display/display.png" alt=""><br>圖片來源: <a href="https://www.w3.org/TR/css-display-3/#the-display-properties">W3C</a></p><br><br><h2 id="了解-display-的好處"><a class="header-anchor" href="#了解-display-的好處"></a>了解 display 的好處</h2><p>講了這麼多，了解 display 到底有什麼好處？<br>個人認為至少有三大優點。</p><h3 id="秒殺元素排列方式"><a class="header-anchor" href="#秒殺元素排列方式"></a>秒殺元素排列方式</h3><p>即使遇到一個從來沒用過的 display 屬性值，也能夠馬上知道在 in flow 下，元素會<code>如何排列</code>，例如，你有聽過或用過 display: flow-root 或 inline-flex 嗎？</p><p>在沒有用過，甚至從沒聽過的情況下，一看 display 表就可以得知 display: flow-root 的元素會生成 block-level box，故元素本身參與 BFC，在 in flow 下會呈現垂直排列。而 display: inline-flex 會生成 inline-level box，故元素本身參與 IFC，在 in flow 下會呈現水平排列。<br><br></p><h3 id="秒殺屬性的適用對象"><a class="header-anchor" href="#秒殺屬性的適用對象"></a>秒殺屬性的適用對象</h3><p>例如常用的 vertical-align 與 text-align 對齊，你知道他們能操控的對象總共有哪些嗎？<br>其實他們是在操控 <code>inline-level</code> 的垂直與水平對齊。</p><p>vertical-align 屬性可以適用於所有 inline-level boxes，也就是可以操控 display 表上所有會生成 inline-level box 元素的垂直對齊。</p><p><img src="./display/vertical-align.png" alt=""><br>圖片來源：<a href="https://www.w3.org/TR/css-inline-3/#propdef-vertical-align">W3C</a></p><p>而 text-align 的屬性則是須設定在 inline-level 外層的 block container，它可操控 display 表上所有會生成 inline-level box 元素的水平對齊。</p><p><img src="./display/text-align.png" alt=""><br>圖片來源：<a href="https://www.w3.org/TR/css-text-3/#justification">W3C</a></p><br><p>再例如，margin: 0 auto，常用在 display: block 元素的水平置中，但除此之外，還可以用在哪些元素上呢？</p><p>其實 display 表上會生成 block-level box 的皆適用。<br><br></p><h3 id="何種-display-會產生-BFC"><a class="header-anchor" href="#何種-display-會產生-BFC"></a>何種 display 會產生 BFC</h3><p>就如同剛剛提及的，什麼類型的 container box 就會<code>建立</code>什麼類型的 formatting context，所以 block container box 可以建立 BFC，這時就可以由 dispaly 表中得知 display: inline-block 與 flow-root 皆會建立 BFC (display: block 例外)。</p><p>另外，其實 display: table 與 inline-table 亦會建立 BFC，因生成的 <a href="https://drafts.csswg.org/css-tables-3/#table-wrapper-box">table wrapper box</a> 也是一種 block container。</p><p>block formatting context (BFC) 在排版中是非常重要的一環，這部分的介紹留在之後文章再詳細說明。</p><br><br><br><br><p>參考資源</p><ol><li><a href="https://www.w3.org/TR/CSS22/visuren.html">W3C-Controlling box generation</a></li><li><a href="https://www.w3.org/TR/css-display-3/#glossary">W3C-Appendix A: Glossary</a></li><li><a href="https://www.w3.org/TR/css-display-3/#the-display-properties">W3C-Box Layout Modes: the display property</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> w3HexSchool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 原理 - Collapsing margins</title>
      <link href="/article/Collapsing-margins.html"/>
      <url>/article/Collapsing-margins.html</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-Collapsing-margins？"><a class="header-anchor" href="#什麼是-Collapsing-margins？"></a>什麼是 Collapsing margins？</h2><p>先來看一段 <a href="https://www.w3.org/TR/CSS2/box.html#collapsing-margins">W3C 規範</a> 的敘述：</p><blockquote><p>In CSS, the adjoining margins of two or more boxes (which might or might not be siblings) can combine to form a single margin. Margins that combine this way are said to collapse, and the resulting combined margin is called a collapsed margin.</p></blockquote><a id="more"></a><p>簡單來說，當相鄰(adjoining)的 margin 相遇時，若合併成一個 margin，這種情況稱為 Collapsing margins。其中，<a href="https://www.w3.org/TR/CSS2/box.html#collapsing-margins">W3C</a> 對於<code>相鄰(adjoining)</code>的定義為：</p><ul><li><p>僅發生於<code>垂直方向</code><br><br></p></li><li><p>皆為在文檔流中(in flow)的塊級元素(block-level)元素，且參與<code>同一個</code><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context">塊格式化上下文(block formatting context，BFC)</a>。</p><p>例如，若是元素會創建新的 BFC，像是根元素 &lt;html&gt; 、float、position: absolute…等等，該元素就不會有 margin collapsing，至於什麼情況下會創建新的 BFC，可參考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context">MDN-block formatting context</a>。</p></li></ul><p><br></br></p><h2 id="什麼時候會發生-margin-collapsing？"><a class="header-anchor" href="#什麼時候會發生-margin-collapsing？"></a>什麼時候會發生 margin collapsing？</h2><p>margin collapsing 可分為兩種情況，一種是同層元素之間，另一種是元素與其父(母)容器之間，但並非所有 block-level 元素皆會發生 margin collapsing，而是有前提條件的。</p><h3 id="一-相鄰的兄弟姊妹"><a class="header-anchor" href="#一-相鄰的兄弟姊妹"></a>(一) 相鄰的兄弟姊妹</h3><blockquote><p>同層且相鄰的 block 元素的 margin-bottom 與 margin-top 相遇時，發生重疊，僅發生於垂直方向。</p></blockquote><p><b>前提條件：</b><br>block 須符合相鄰(adjoining)的定義：</p><ul><li>皆為在文檔流中(in flow)的塊級元素(block-level)元素，且參與同一個<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context">塊格式化上下文(BFC)</a>。</li></ul><p>例如：兩個相鄰的 block 元素，紅色 block 的 margin-bottom = 30px，黑色 block 的 margin-top = 30px，最終兩個 block 元素之間的距離為 30px，而非 60px。<br><br></br></p><p><a href="https://codepen.io/yachen/pen/xxKmZrd?editors=1100">範例連結</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block1"</span>&gt;</span>我有 margin-bottom：30px<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block2"</span>&gt;</span>我有 margin-top：30px<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block1</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.block2</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="./Collapsing-margins/demo.png" alt=""></p><p><br></br></p><h3 id="二-容器與其第一個-最後一個子元素"><a class="header-anchor" href="#二-容器與其第一個-最後一個子元素"></a>(二) 容器與其第一個/最後一個子元素</h3><blockquote><p>亦僅發生於垂直方向，且有其前提條件。</p></blockquote><p><b>前提條件:</b></p><ul><li><p>皆為在文檔流中(in flow)的塊級元素(block-level)元素，且參與同一個<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context">塊格式化上下文(BFC)</a>。<br><br></p></li><li><p>容器<code>無</code>設定<code>邊框(border)</code>、<code>內距(padding)</code>或加上 <code>clear-fix</code> 的屬性。</p></li></ul><p><br></br></p><p>例如：</p><p>虛線為容器的 outline，紅色區塊為容器內的第一個子元素，現在子元素頂部緊貼著容器頂部。若想利用 margin-top 屬性，讓子元素的頂部距離容器頂部 50px。<br>結果會發現，子元素的頂部並沒有與容器頂部分離！</p><p><a href="https://codepen.io/yachen/pen/ZEzVGRx">範例連結</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"first_child"</span>&gt;</span>容器中的第一個子元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.first_child</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="./Collapsing-margins/before-margin-collapsing.png" alt=""></p><p><br></br></p><p>打開開發人員工具檢視一下，會發現子元素的 margin-top 竟然跑出容器外了，這<code>結果與直接在父容器上設定 margin-top: 50px 是一樣的</code>。</p><p><br></br></p><p><img src="./Collapsing-margins/after-margin-collapsing.png" alt=""></p><p><br></br></p><h2 id="解決方法："><a class="header-anchor" href="#解決方法："></a>解決方法：</h2><p>使其不再符合前提條件，例如不再是 block 或是創建 BFC。</p><p><br></br></p><h2 id="margin-計算方式"><a class="header-anchor" href="#margin-計算方式"></a>margin 計算方式</h2><p>當發生 margin collapsing 時，由於外距(margin)可為負數，故會有三種情況：</p><ul><li><p>兩個 margin 皆為正 ⇒ 取大值</p></li><li><p>一個 margin 為正，一個 margin 為負 ⇒ 相加</p></li><li><p>兩個 margin 皆為負 ⇒ 取最小 (最負)</p></li></ul><p><br></br></p><p>參考資料</p><ol><li><a href="https://www.w3.org/TR/CSS2/box.html#collapsing-margins">W3C - Collapsing Margins</a></li><li><a href="https://www.w3.org/TR/css-box-3/">W3C - Box Model</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing">MDN - Mastering margin collapsing</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context">MDN - Block formatting context</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 原理 - Containing block</title>
      <link href="/article/Containing-block.html"/>
      <url>/article/Containing-block.html</url>
      
        <content type="html"><![CDATA[<p>Containing block，中文常被翻譯為包含塊，它其實代表的是一個「區域」，一個由 box model 的 content edge 或 padding edge (若有設定 padding)所圍繞的範圍，它攸關元素的定位、寬高、內距與外距的計算，所以必須清楚知道元素的 containing block 是誰，才不會使畫面失控。</p><a id="more"></a><p>例如，在元素設定 width、height、padding、margin 屬性時，若屬性值給予的單位為百分比(％)，則將會以該元素的 containing block 為基準去做計算，再例如，元素的 position定位，也與該元素的 containing block 有關。</p><p><img src="./Containing-block/box-model.svg" alt="box model"><br><br></br></p><h2 id="如何尋找包含塊："><a class="header-anchor" href="#如何尋找包含塊："></a>如何尋找包含塊：</h2><p>一個容易犯的錯誤是直接將元素的「父層」視為該元素的 containing block，事實上，在有些情況下並非如此，像是 position: absolute 與 fixed 時。大致情況如下：</p><ul><li><p>根元素 &lt;html&gt; 的 containing block 稱為 initial containing block (初始包含塊)，而在連續媒體下，initial containing block 即為 viewport (視口)。<br><br></p></li><li><p>若元素的 <code>position</code> 屬性值為 <code>static</code>、<code>relative</code> 或 <code>sticky</code>，則 containing block 為距離該元素最近的祖先 block container 或 formatting context (格式化上下文)的 <code>contnet edge (內容區邊緣)</code>組成。</p><p>其中，block container 並不完全等於 display: block，像是 display: inline-block 與 list-item 也會形成 block container，這部分有興趣可參考 <a href="https://www.w3.org/TR/css-display-3/#the-display-properties">W3C display 表格</a>。</p><p>至於 formatting context ，其實它只是一個「環境」，大致可分為幾種環境，像是 block formatting context、flex formatting context 或 grid formatting context，之後有機會再介紹。<br><br></p></li><li><p>若元素 <code>position</code> 屬性值為 <code>absolute</code>，則其 containing block 為距離它<code>最近</code>且 <code>position</code> 屬性值<code>非 static</code>（即為 fixed、absolute、relative 或 sticky）的<code>祖先元素</code>的 <code>padding edge(內距邊緣)</code>組成。<br><br></p></li><li><p>若元素 position 屬性值為 <code>fixed</code>，則其 containing block 在連續媒體下為 <code>viewport</code>。<br><br></p></li><li><p>如果 <code>position</code> 屬性值為 <code>absolute</code> 或 <code>fixed</code>，containing block 也可能是由滿足以下條件的<code>最接近祖先元素</code>的內容區邊緣組成：</p><ul><li>transform 或 perspective 屬性值不為 none。</li><li>filter 屬性值不為 none。</li></ul></li></ul><br><h3 id="來看幾個例子吧"><a class="header-anchor" href="#來看幾個例子吧"></a>來看幾個例子吧</h3><h4 id="例-1"><a class="header-anchor" href="#例-1"></a>例 1.</h4><blockquote><p>找出 &lt;p&gt; 的包含塊，並且計算出 &lt;p&gt; 最終的寬、高、內距與外距。</p></blockquote><p>在此例子中，因為 &lt;p&gt; 的 position 值為預設的 static，故其包含塊為距離它最近的 block container 的 padding edge(內距邊緣)所圍繞範圍，又因 &lt;p&gt; 的 width、 height、margin 與 padding 單位皆為百分比(%)，所以會以 containing block，即 &lt;section&gt; 為基準來計算。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">160px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;   <span class="comment">/* == 400px * .5 = 200px */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">25%</span>;  <span class="comment">/* == 160px * .25 = 40px */</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5%</span>;   <span class="comment">/* == 400px * .05 = 20px */</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5%</span>;  <span class="comment">/* == 400px * .05 = 20px */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h4 id="例-2"><a class="header-anchor" href="#例-2"></a>例 2.</h4><blockquote><p>現在將 &lt;section&gt; 改為 display: inline。<br>找出 &lt;p&gt; 的包含塊，並且計算出 &lt;p&gt; 最終的寬度。</p></blockquote><p>在此例子中，&lt;p&gt; 的 position 依舊是預設的 static，但是 &lt;section&gt; 不再是 block container，沒有形成一個格式化上下文，故 &lt;p&gt; 的包含塊為 &lt;body&gt; 內距邊緣所圍範圍。</p><p>&lt;p&gt; 的寬度將以 &lt;body&gt; 為基準計算。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;     <span class="comment">/* == half the &lt;body&gt;'s width */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;  <span class="comment">/* <span class="doctag">Note:</span> a percentage would be 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h4 id="例-3"><a class="header-anchor" href="#例-3"></a>例 3.</h4><blockquote><p>包含塊有內距(padding)。<br>找出 &lt;p&gt; 的包含塊，並且計算出 &lt;p&gt; 的最終寬度、高度、外距與內距。</p></blockquote><p>在此例中，P元素的包含塊是 &lt;section&gt;，因為 &lt;section&gt; 的  position 值非 static。<br>&lt;p&gt; 百分值會受其包含塊 &lt;section&gt; 的 padding 所影響。若將包含塊的 box-sizing 值設置為 border-box，就可以避免這個問題。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">160px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">30px</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;   <span class="comment">/* == (400px + 20px + 20px) * 50% = 220px */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">25%</span>;  <span class="comment">/* == (160px + 30px + 30px) * 25% = 55px */</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5%</span>;   <span class="comment">/* == (400px + 20px + 20px) * 5% = 22px */</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5%</span>;  <span class="comment">/* == (400px + 20px + 20px) * 5% = 22px */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></br><br><br></br></p><p>參考資源</p><ol><li><a href="https://www.w3.org/TR/CSS2/visuren.html#block-boxes">W3C-Containing blocks</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block">MDN-Layout and the containing block</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10220938">每天來點 CSS Specification-Visual Formatting Model - 定義、containing block</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> w3HexSchool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 原理 - Box model</title>
      <link href="/article/box-model.html"/>
      <url>/article/box-model.html</url>
      
        <content type="html"><![CDATA[<p>想像每個元素都是個盒子，而 &lt;html&gt; 就像是個超級大盒子，裡面裝了許許多多大小不一的盒子，像是 &lt;div&gt;、&lt;p&gt;、&lt;span&gt;、&lt;button&gt;…等等，而每個盒子由四個部分組成。</p><a id="more"></a><p>如下圖所示，box model 由四個部分組成，由內至外依序為</p><ul><li>content area (內容區)</li><li>padding (內距)</li><li>border (邊框)</li><li>margin (外距)</li></ul><p><img src="./box-model/box-model.svg" alt="box model"></p><h2 id="content-area"><a class="header-anchor" href="#content-area"></a>content area</h2><p>內容區域，也就是盒子裡裝的東西，可能是文字、圖片或是又裝了其它元素(其他盒子)，例如 &lt;div&gt;、&lt;p&gt;、&lt;span&gt;、&lt;button&gt;…等等。</p><br><br><h2 id="padding-內距"><a class="header-anchor" href="#padding-內距"></a>padding (內距)</h2><p>可想像成盒子和其內容物的距離，介於 content area(內容區) 與 border(邊框)之間的部分。其特色為</p><ul><li><p>厚度取決於 padding 屬性，</p></li><li><p>不能為負值。</p></li><li><p>預設下，padding 不包含在屬性 width 的範圍，因 box-sizing 預設值為 content-box，當然只包含最裡面的 content 部分。</p></li></ul><br><br><h2 id="border-邊框"><a class="header-anchor" href="#border-邊框"></a>border (邊框)</h2><p>介於 margin (外距)與 padding(內距) 之間的範圍。</p><ul><li><p>可以使用 border 屬性來設置邊框的寬度、樣式與顏色。<br>三合一縮寫語法 (三個值的順序可以互換)：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border</span>: <span class="selector-tag">border-width</span>｜<span class="selector-tag">border-style</span>｜<span class="selector-tag">border-color</span></span><br></pre></td></tr></table></figure><p>亦可單獨指 定border 的寬度、樣式與顏色。個別屬性如下：</p><ul><li>border-width (邊框寬度)</li><li>border-style (邊框樣式)</li><li>border-color (邊框顏色)<br><br></li></ul></li><li><p>預設情況下，不包含在 width 與 height 的範圍內。</p></li></ul><br><br><h2 id="margin-外距"><a class="header-anchor" href="#margin-外距"></a>margin (外距)</h2><p>margin 圍繞於 border 之外，用於推開元素與其它元素之間的距離。其特色為</p><ul><li><p>厚度取決於 margin 屬性。</p></li><li><p>可以是正值或負值，但若為負值，可能會與其它元素重疊。</p></li><li><p>元素本身的背景設定無法渲染至 margin 部分，例如 background-color 或 background-image。</p></li><li><p>不包含在 width 與 height 範圍內。</p></li></ul><br><br><br><h2 id="box-sizing"><a class="header-anchor" href="#box-sizing"></a>box-sizing</h2><p>一個新手常遇見的問題：奇怪，明明指定了元素的 width 與 height，但元素渲染於畫面上的寬度與高度卻比自己設定的值來得大？</p><p>這問題通常與 box-sizing 有關。</p><p>box-sizing 屬性決定如何計算一個元素渲染於畫面上的總寬度與總高度，也就是 size，有 content-box 與 border-box 兩種屬性值。</p><br><h3 id="一-content-box"><a class="header-anchor" href="#一-content-box"></a>(一) content-box</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">box-sizing</span>: <span class="selector-tag">content-box</span>；</span><br></pre></td></tr></table></figure><p>content-box 為預設值，如同字面上的意思，若該元素可以指定 width 與 height，則在設定 width 或 height 時，其指定的僅為最內層的 content 部分，例如 width: 100px，則代表元素的 content area 寬度為 100px。</p><p>如果同時還設定了 padding 或是 border，則必須再加上 padding 與 border，才是最終渲染於畫面上的寬度或高度。</p><br><p>例如： 給定一個 div 的設定如下：<br><a href="https://codepen.io/yachen/pen/oNvQpgG?editors=1100">codepen 範例連結</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: content-box; <span class="comment">/*預設值*/</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">10px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>則在 <code>content-box</code> 下：<br><br>最終渲染寬度 ≠ width 200px<br><br>而是 ( width 200 + 左右 padding 20*2 + 左右 border 10*2 )px = 260px ;<br></p><p>最終渲染高度 ≠ height 100px<br><br>而是( height 100 + 上下 padding 20*2 + 上下 border 10*2 )px = 160px。</p><p><img src="./box-model/content-box.png" alt="content-box"></p><br><br><h3 id="二-border-box"><a class="header-anchor" href="#二-border-box"></a>(二) border-box</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">box-sizing</span>: <span class="selector-tag">border-box</span>;</span><br></pre></td></tr></table></figure><p>如同字面上的意思，若該元素可以指定 width 與 height，則 width 和 height 屬性值涵蓋的範圍為 border 以內，也就是 content、padding 和 border，注意，不包括 margin。</p><p>border-box 可以使元素渲染於畫面上的總寬度與總高度的計算變得較直覺簡單，不必再額外加上 padding 和 border，連 bootstrap 也對所有元素做了此設定。</p><br><p>例如： 給定一個 div 的設定如下：<br>在 <code>border-box</code> 下：<br><br>最終渲染寬度即為 width 200px ;<br><br>最終渲染高度即為 height 100px。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">10px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="./box-model/border-box.png" alt="border-box"></p><br><br><br><br><p>參考資料</p><ol><li><a href="https://www.w3.org/TR/css-box-3/">W3C - CSS Box Model Module Level 3</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/The_box_model">MDN - The box model</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-sizing">MDN - box-sizing</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
